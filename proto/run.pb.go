// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/go-run/proto/run.proto

/*
Package go_micro_run is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/go-run/proto/run.proto

It has these top-level messages:
	Source
	Binary
	Process
	FetchRequest
	FetchResponse
	BuildRequest
	BuildResponse
	ExecRequest
	ExecResponse
	KillRequest
	KillResponse
	WaitRequest
	WaitResponse
	RunRequest
	RunResponse
	StopRequest
	StopResponse
	StatusRequest
	StatusResponse
*/
package go_micro_run

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Source struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Dir string `protobuf:"bytes,2,opt,name=dir" json:"dir,omitempty"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Source) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Source) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

type Binary struct {
	Path   string  `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Source *Source `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (m *Binary) Reset()                    { *m = Binary{} }
func (m *Binary) String() string            { return proto.CompactTextString(m) }
func (*Binary) ProtoMessage()               {}
func (*Binary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Binary) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Binary) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type Process struct {
	Id     string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Binary *Binary `protobuf:"bytes,2,opt,name=binary" json:"binary,omitempty"`
}

func (m *Process) Reset()                    { *m = Process{} }
func (m *Process) String() string            { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()               {}
func (*Process) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Process) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Process) GetBinary() *Binary {
	if m != nil {
		return m.Binary
	}
	return nil
}

type FetchRequest struct {
	Url    string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Update bool   `protobuf:"varint,2,opt,name=update" json:"update,omitempty"`
}

func (m *FetchRequest) Reset()                    { *m = FetchRequest{} }
func (m *FetchRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()               {}
func (*FetchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FetchRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *FetchRequest) GetUpdate() bool {
	if m != nil {
		return m.Update
	}
	return false
}

type FetchResponse struct {
	Source *Source `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
}

func (m *FetchResponse) Reset()                    { *m = FetchResponse{} }
func (m *FetchResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()               {}
func (*FetchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FetchResponse) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type BuildRequest struct {
	Source *Source `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
}

func (m *BuildRequest) Reset()                    { *m = BuildRequest{} }
func (m *BuildRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildRequest) ProtoMessage()               {}
func (*BuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BuildRequest) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type BuildResponse struct {
	Binary *Binary `protobuf:"bytes,1,opt,name=binary" json:"binary,omitempty"`
}

func (m *BuildResponse) Reset()                    { *m = BuildResponse{} }
func (m *BuildResponse) String() string            { return proto.CompactTextString(m) }
func (*BuildResponse) ProtoMessage()               {}
func (*BuildResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BuildResponse) GetBinary() *Binary {
	if m != nil {
		return m.Binary
	}
	return nil
}

type ExecRequest struct {
	Binary *Binary `protobuf:"bytes,1,opt,name=binary" json:"binary,omitempty"`
}

func (m *ExecRequest) Reset()                    { *m = ExecRequest{} }
func (m *ExecRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()               {}
func (*ExecRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ExecRequest) GetBinary() *Binary {
	if m != nil {
		return m.Binary
	}
	return nil
}

type ExecResponse struct {
	Process *Process `protobuf:"bytes,1,opt,name=process" json:"process,omitempty"`
}

func (m *ExecResponse) Reset()                    { *m = ExecResponse{} }
func (m *ExecResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecResponse) ProtoMessage()               {}
func (*ExecResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ExecResponse) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

type KillRequest struct {
	Process *Process `protobuf:"bytes,1,opt,name=process" json:"process,omitempty"`
}

func (m *KillRequest) Reset()                    { *m = KillRequest{} }
func (m *KillRequest) String() string            { return proto.CompactTextString(m) }
func (*KillRequest) ProtoMessage()               {}
func (*KillRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *KillRequest) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

type KillResponse struct {
}

func (m *KillResponse) Reset()                    { *m = KillResponse{} }
func (m *KillResponse) String() string            { return proto.CompactTextString(m) }
func (*KillResponse) ProtoMessage()               {}
func (*KillResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type WaitRequest struct {
	Process *Process `protobuf:"bytes,1,opt,name=process" json:"process,omitempty"`
}

func (m *WaitRequest) Reset()                    { *m = WaitRequest{} }
func (m *WaitRequest) String() string            { return proto.CompactTextString(m) }
func (*WaitRequest) ProtoMessage()               {}
func (*WaitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *WaitRequest) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

type WaitResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *WaitResponse) Reset()                    { *m = WaitResponse{} }
func (m *WaitResponse) String() string            { return proto.CompactTextString(m) }
func (*WaitResponse) ProtoMessage()               {}
func (*WaitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *WaitResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RunRequest struct {
	Url     string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Restart bool   `protobuf:"varint,2,opt,name=restart" json:"restart,omitempty"`
	Update  bool   `protobuf:"varint,3,opt,name=update" json:"update,omitempty"`
}

func (m *RunRequest) Reset()                    { *m = RunRequest{} }
func (m *RunRequest) String() string            { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()               {}
func (*RunRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RunRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RunRequest) GetRestart() bool {
	if m != nil {
		return m.Restart
	}
	return false
}

func (m *RunRequest) GetUpdate() bool {
	if m != nil {
		return m.Update
	}
	return false
}

type RunResponse struct {
}

func (m *RunResponse) Reset()                    { *m = RunResponse{} }
func (m *RunResponse) String() string            { return proto.CompactTextString(m) }
func (*RunResponse) ProtoMessage()               {}
func (*RunResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type StopRequest struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *StopRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type StopResponse struct {
}

func (m *StopResponse) Reset()                    { *m = StopResponse{} }
func (m *StopResponse) String() string            { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()               {}
func (*StopResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type StatusRequest struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *StatusRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type StatusResponse struct {
	Info string `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *StatusResponse) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func init() {
	proto.RegisterType((*Source)(nil), "go.micro.run.Source")
	proto.RegisterType((*Binary)(nil), "go.micro.run.Binary")
	proto.RegisterType((*Process)(nil), "go.micro.run.Process")
	proto.RegisterType((*FetchRequest)(nil), "go.micro.run.FetchRequest")
	proto.RegisterType((*FetchResponse)(nil), "go.micro.run.FetchResponse")
	proto.RegisterType((*BuildRequest)(nil), "go.micro.run.BuildRequest")
	proto.RegisterType((*BuildResponse)(nil), "go.micro.run.BuildResponse")
	proto.RegisterType((*ExecRequest)(nil), "go.micro.run.ExecRequest")
	proto.RegisterType((*ExecResponse)(nil), "go.micro.run.ExecResponse")
	proto.RegisterType((*KillRequest)(nil), "go.micro.run.KillRequest")
	proto.RegisterType((*KillResponse)(nil), "go.micro.run.KillResponse")
	proto.RegisterType((*WaitRequest)(nil), "go.micro.run.WaitRequest")
	proto.RegisterType((*WaitResponse)(nil), "go.micro.run.WaitResponse")
	proto.RegisterType((*RunRequest)(nil), "go.micro.run.RunRequest")
	proto.RegisterType((*RunResponse)(nil), "go.micro.run.RunResponse")
	proto.RegisterType((*StopRequest)(nil), "go.micro.run.StopRequest")
	proto.RegisterType((*StopResponse)(nil), "go.micro.run.StopResponse")
	proto.RegisterType((*StatusRequest)(nil), "go.micro.run.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "go.micro.run.StatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Runtime service

type RuntimeClient interface {
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*BuildResponse, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillResponse, error)
	Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (Runtime_WaitClient, error)
}

type runtimeClient struct {
	cc *grpc.ClientConn
}

func NewRuntimeClient(cc *grpc.ClientConn) RuntimeClient {
	return &runtimeClient{cc}
}

func (c *runtimeClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := grpc.Invoke(ctx, "/go.micro.run.Runtime/Fetch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := grpc.Invoke(ctx, "/go.micro.run.Runtime/Build", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := grpc.Invoke(ctx, "/go.micro.run.Runtime/Exec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillResponse, error) {
	out := new(KillResponse)
	err := grpc.Invoke(ctx, "/go.micro.run.Runtime/Kill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeClient) Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (Runtime_WaitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Runtime_serviceDesc.Streams[0], c.cc, "/go.micro.run.Runtime/Wait", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeWaitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runtime_WaitClient interface {
	Recv() (*WaitResponse, error)
	grpc.ClientStream
}

type runtimeWaitClient struct {
	grpc.ClientStream
}

func (x *runtimeWaitClient) Recv() (*WaitResponse, error) {
	m := new(WaitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Runtime service

type RuntimeServer interface {
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	Build(context.Context, *BuildRequest) (*BuildResponse, error)
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	Kill(context.Context, *KillRequest) (*KillResponse, error)
	Wait(*WaitRequest, Runtime_WaitServer) error
}

func RegisterRuntimeServer(s *grpc.Server, srv RuntimeServer) {
	s.RegisterService(&_Runtime_serviceDesc, srv)
}

func _Runtime_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.run.Runtime/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.run.Runtime/Build",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).Build(ctx, req.(*BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.run.Runtime/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.run.Runtime/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).Kill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runtime_Wait_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WaitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServer).Wait(m, &runtimeWaitServer{stream})
}

type Runtime_WaitServer interface {
	Send(*WaitResponse) error
	grpc.ServerStream
}

type runtimeWaitServer struct {
	grpc.ServerStream
}

func (x *runtimeWaitServer) Send(m *WaitResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Runtime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.run.Runtime",
	HandlerType: (*RuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _Runtime_Fetch_Handler,
		},
		{
			MethodName: "Build",
			Handler:    _Runtime_Build_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Runtime_Exec_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Runtime_Kill_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Wait",
			Handler:       _Runtime_Wait_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/micro/go-run/proto/run.proto",
}

// Client API for Service service

type ServiceClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := grpc.Invoke(ctx, "/go.micro.run.Service/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := grpc.Invoke(ctx, "/go.micro.run.Service/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/go.micro.run.Service/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	Run(context.Context, *RunRequest) (*RunResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.run.Service/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.run.Service/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.run.Service/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.run.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Service_Run_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Service_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Service_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/micro/go-run/proto/run.proto",
}

func init() { proto.RegisterFile("github.com/micro/go-run/proto/run.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x93, 0xae, 0x4b, 0xe0, 0x4d, 0x5a, 0x21, 0x6b, 0xa0, 0x2e, 0x43, 0x02, 0xa2, 0x49,
	0x70, 0x18, 0x09, 0x2a, 0x17, 0x24, 0x36, 0x26, 0x2a, 0x0d, 0x24, 0xb8, 0x4c, 0xe9, 0x81, 0x73,
	0x9a, 0x98, 0xd6, 0x52, 0x1b, 0x07, 0xc7, 0x46, 0xf0, 0x29, 0xb9, 0xf1, 0x79, 0x90, 0xff, 0x44,
	0x73, 0xa2, 0x54, 0x5a, 0xb9, 0xd9, 0xf1, 0xfb, 0x3c, 0xef, 0xfb, 0xd4, 0x3f, 0xab, 0xf0, 0x72,
	0x4d, 0xf8, 0x46, 0xac, 0x92, 0x82, 0xee, 0xd2, 0x1d, 0x29, 0x18, 0x4d, 0xd7, 0xf4, 0x35, 0x13,
	0x55, 0x5a, 0x33, 0xca, 0x69, 0xca, 0x44, 0x95, 0xa8, 0x15, 0x0a, 0xd7, 0x34, 0x51, 0x05, 0x09,
	0x13, 0x55, 0x7c, 0x01, 0xde, 0x92, 0x0a, 0x56, 0x60, 0xf4, 0x08, 0x8e, 0x04, 0xdb, 0xce, 0xdc,
	0xe7, 0xee, 0xab, 0x87, 0x99, 0x5c, 0xca, 0x2f, 0x25, 0x61, 0xb3, 0x91, 0xfe, 0x52, 0x12, 0x16,
	0x7f, 0x01, 0x6f, 0x41, 0xaa, 0x9c, 0xfd, 0x46, 0x08, 0xc6, 0x75, 0xce, 0x37, 0xa6, 0x5c, 0xad,
	0xd1, 0x05, 0x78, 0x8d, 0xf2, 0x52, 0x92, 0x60, 0x7e, 0x92, 0xd8, 0xad, 0x12, 0xdd, 0x27, 0x33,
	0x35, 0xf1, 0x67, 0xf0, 0x6f, 0x19, 0x2d, 0x70, 0xd3, 0xa0, 0x29, 0x8c, 0x48, 0x69, 0xac, 0x46,
	0xa4, 0x94, 0x46, 0x2b, 0xd5, 0x66, 0xd8, 0x48, 0x8f, 0x90, 0x99, 0x9a, 0xf8, 0x1d, 0x84, 0x9f,
	0x30, 0x2f, 0x36, 0x19, 0xfe, 0x21, 0x70, 0xc3, 0x07, 0x82, 0x3c, 0x01, 0x4f, 0xd4, 0x65, 0xce,
	0xf5, 0x60, 0x0f, 0x32, 0xb3, 0x8b, 0xaf, 0x60, 0x62, 0x94, 0x4d, 0x4d, 0xab, 0x06, 0x5b, 0x09,
	0xdc, 0x7b, 0x24, 0xb8, 0x84, 0x70, 0x21, 0xc8, 0xb6, 0x6c, 0x1b, 0x1f, 0xa6, 0xbe, 0x82, 0x89,
	0x51, 0xdf, 0x35, 0x37, 0xa9, 0xdd, 0x7b, 0xa4, 0x7e, 0x0f, 0xc1, 0xcd, 0x2f, 0x5c, 0x58, 0xbd,
	0x0f, 0x10, 0x5f, 0x43, 0xa8, 0xc5, 0xa6, 0x75, 0x0a, 0x7e, 0xad, 0xef, 0xc2, 0xc8, 0x1f, 0x77,
	0xe5, 0xe6, 0xa2, 0xb2, 0xb6, 0x2a, 0xfe, 0x00, 0xc1, 0x57, 0xb2, 0xdd, 0xb6, 0xdd, 0x0f, 0xd6,
	0x4f, 0x21, 0xd4, 0x7a, 0x3d, 0x80, 0xf4, 0xfb, 0x96, 0x13, 0xfe, 0xdf, 0x7e, 0xe7, 0x10, 0x6a,
	0xbd, 0x09, 0x74, 0x02, 0xc7, 0x98, 0x31, 0xca, 0x0c, 0x05, 0x7a, 0x13, 0xdf, 0x02, 0x64, 0xa2,
	0xda, 0xcf, 0xc9, 0x0c, 0x7c, 0x86, 0x1b, 0x9e, 0x33, 0x6e, 0x40, 0x69, 0xb7, 0x16, 0x41, 0x47,
	0x1d, 0x82, 0x26, 0x10, 0x28, 0x47, 0x13, 0xe3, 0x19, 0x04, 0x4b, 0x4e, 0xeb, 0xbd, 0x1d, 0x64,
	0x6e, 0x5d, 0x60, 0x04, 0x2f, 0x60, 0xb2, 0xe4, 0x39, 0x17, 0xcd, 0x7e, 0xc9, 0x39, 0x4c, 0xdb,
	0x12, 0x13, 0x0e, 0xc1, 0x98, 0x54, 0xdf, 0x69, 0xfb, 0xf6, 0xe4, 0x7a, 0xfe, 0x77, 0x04, 0x7e,
	0x26, 0x2a, 0x4e, 0x76, 0x18, 0x2d, 0xe0, 0x58, 0x61, 0x8d, 0xa2, 0xee, 0xaf, 0x66, 0xbf, 0x92,
	0xe8, 0x6c, 0xf0, 0xcc, 0x8c, 0xe5, 0x48, 0x0f, 0x45, 0x67, 0xdf, 0xc3, 0x06, 0xbe, 0xef, 0xd1,
	0xc1, 0x39, 0x76, 0xd0, 0x35, 0x8c, 0x25, 0x65, 0xe8, 0xb4, 0x5b, 0x66, 0x61, 0x1b, 0x45, 0x43,
	0x47, 0xb6, 0x81, 0xa4, 0xa4, 0x6f, 0x60, 0x91, 0xd7, 0x37, 0xe8, 0x40, 0xe5, 0xa0, 0x8f, 0x30,
	0x96, 0x58, 0xf4, 0x0d, 0x2c, 0xd4, 0xfa, 0x06, 0x36, 0x45, 0xb1, 0xf3, 0xc6, 0x9d, 0xff, 0x71,
	0xc1, 0x5f, 0x62, 0xf6, 0x93, 0x14, 0x18, 0x5d, 0xc2, 0x51, 0x26, 0x2a, 0x34, 0xeb, 0x4a, 0xee,
	0x90, 0x8a, 0x4e, 0x07, 0x4e, 0xec, 0x34, 0xf2, 0xee, 0xfb, 0xc3, 0x58, 0xc0, 0xf4, 0x87, 0xe9,
	0xa0, 0xe2, 0xa0, 0x1b, 0xf0, 0x34, 0x09, 0xe8, 0xac, 0x5f, 0x67, 0x21, 0x14, 0x3d, 0x1d, 0x3e,
	0x6c, 0x6d, 0x56, 0x9e, 0xfa, 0x1f, 0x78, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x06, 0xb0,
	0x49, 0x32, 0x06, 0x00, 0x00,
}
